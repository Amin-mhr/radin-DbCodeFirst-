// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using University.Db;

namespace University.Db.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    [Migration("20220111071300_CreateDbUniversity")]
    partial class CreateDbUniversity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EnrollStudent", b =>
                {
                    b.Property<long>("StudentsStudentID")
                        .HasColumnType("bigint");

                    b.Property<long>("enrollsClassId")
                        .HasColumnType("bigint");

                    b.HasKey("StudentsStudentID", "enrollsClassId");

                    b.HasIndex("enrollsClassId");

                    b.ToTable("EnrollStudent");
                });

            modelBuilder.Entity("University.Db.Model.Admin", b =>
                {
                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminName");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("University.Db.Model.Course", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("ClassID")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfUnits")
                        .HasColumnType("bigint");

                    b.HasKey("Name");

                    b.HasIndex("ClassID")
                        .IsUnique()
                        .HasFilter("[ClassID] IS NOT NULL");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("University.Db.Model.Enroll", b =>
                {
                    b.Property<long>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.HasKey("ClassId");

                    b.ToTable("Enrolls");
                });

            modelBuilder.Entity("University.Db.Model.Professor", b =>
                {
                    b.Property<long>("ProfessorID")
                        .HasColumnType("bigint");

                    b.HasKey("ProfessorID");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("University.Db.Model.Student", b =>
                {
                    b.Property<long>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AverageScore")
                        .HasColumnType("float");

                    b.Property<long>("ClassCode")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfUnits")
                        .HasColumnType("bigint");

                    b.Property<long?>("UniversityClassClassId")
                        .HasColumnType("bigint");

                    b.HasKey("StudentID");

                    b.HasIndex("UniversityClassClassId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("University.Db.Model.UniversityClass", b =>
                {
                    b.Property<long>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AverageScore")
                        .HasColumnType("float");

                    b.Property<long?>("ProfessorID")
                        .HasColumnType("bigint");

                    b.HasKey("ClassId");

                    b.HasIndex("ProfessorID");

                    b.ToTable("UniversityClasses");
                });

            modelBuilder.Entity("EnrollStudent", b =>
                {
                    b.HasOne("University.Db.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.Db.Model.Enroll", null)
                        .WithMany()
                        .HasForeignKey("enrollsClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("University.Db.Model.Course", b =>
                {
                    b.HasOne("University.Db.Model.UniversityClass", "UniversityClass")
                        .WithOne("Course")
                        .HasForeignKey("University.Db.Model.Course", "ClassID");

                    b.Navigation("UniversityClass");
                });

            modelBuilder.Entity("University.Db.Model.Student", b =>
                {
                    b.HasOne("University.Db.Model.UniversityClass", "UniversityClass")
                        .WithMany("Students")
                        .HasForeignKey("UniversityClassClassId");

                    b.Navigation("UniversityClass");
                });

            modelBuilder.Entity("University.Db.Model.UniversityClass", b =>
                {
                    b.HasOne("University.Db.Model.Professor", "Professor")
                        .WithMany("UniversityClasses")
                        .HasForeignKey("ProfessorID");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("University.Db.Model.Professor", b =>
                {
                    b.Navigation("UniversityClasses");
                });

            modelBuilder.Entity("University.Db.Model.UniversityClass", b =>
                {
                    b.Navigation("Course")
                        .IsRequired();

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
